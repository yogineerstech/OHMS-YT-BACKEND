
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.HospitalNetworkScalarFieldEnum = {
  id: 'id',
  networkName: 'networkName',
  networkCode: 'networkCode',
  headquartersAddress: 'headquartersAddress',
  registrationNumber: 'registrationNumber',
  taxId: 'taxId',
  gstin: 'gstin',
  primaryContact: 'primaryContact',
  configuration: 'configuration',
  networkType: 'networkType',
  accreditationDetails: 'accreditationDetails',
  regulatoryCompliance: 'regulatoryCompliance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HospitalScalarFieldEnum = {
  id: 'id',
  networkId: 'networkId',
  name: 'name',
  hospitalCode: 'hospitalCode',
  hospitalType: 'hospitalType',
  accreditationDetails: 'accreditationDetails',
  licenseDetails: 'licenseDetails',
  address: 'address',
  coordinates: 'coordinates',
  contactDetails: 'contactDetails',
  facilities: 'facilities',
  capacityDetails: 'capacityDetails',
  operationalHours: 'operationalHours',
  emergencyServices: 'emergencyServices',
  traumaCenterLevel: 'traumaCenterLevel',
  teachingHospital: 'teachingHospital',
  researchFacility: 'researchFacility',
  telemedicineEnabled: 'telemedicineEnabled',
  digitalHealthIntegration: 'digitalHealthIntegration',
  abdmRegistration: 'abdmRegistration',
  configuration: 'configuration',
  timezone: 'timezone',
  currency: 'currency',
  supportedLanguages: 'supportedLanguages',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepartmentCategoryScalarFieldEnum = {
  id: 'id',
  categoryName: 'categoryName',
  categoryCode: 'categoryCode',
  description: 'description',
  icon: 'icon',
  colorCode: 'colorCode',
  parentCategoryId: 'parentCategoryId',
  hierarchyLevel: 'hierarchyLevel',
  specializationType: 'specializationType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  hospitalId: 'hospitalId',
  categoryId: 'categoryId',
  floorId: 'floorId',
  parentDepartmentId: 'parentDepartmentId',
  name: 'name',
  code: 'code',
  description: 'description',
  departmentType: 'departmentType',
  specialtyType: 'specialtyType',
  services: 'services',
  operatingHours: 'operatingHours',
  contactInfo: 'contactInfo',
  staffCapacity: 'staffCapacity',
  equipmentInventory: 'equipmentInventory',
  roomAllocations: 'roomAllocations',
  appointmentSettings: 'appointmentSettings',
  emergencyProtocols: 'emergencyProtocols',
  qualityMetrics: 'qualityMetrics',
  budgetAllocation: 'budgetAllocation',
  revenueTarget: 'revenueTarget',
  performanceKPIs: 'performanceKPIs',
  accreditations: 'accreditations',
  certifications: 'certifications',
  protocols: 'protocols',
  guidelines: 'guidelines',
  isActive: 'isActive',
  isEmergencyDepartment: 'isEmergencyDepartment',
  acceptsWalkIns: 'acceptsWalkIns',
  requiresReferral: 'requiresReferral',
  supportsTelemedicine: 'supportsTelemedicine',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FloorScalarFieldEnum = {
  id: 'id',
  hospitalId: 'hospitalId',
  floorNumber: 'floorNumber',
  floorName: 'floorName',
  floorType: 'floorType',
  totalArea: 'totalArea',
  usableArea: 'usableArea',
  capacity: 'capacity',
  facilities: 'facilities',
  accessibilityFeatures: 'accessibilityFeatures',
  emergencyExits: 'emergencyExits',
  fireSystemDetails: 'fireSystemDetails',
  securityFeatures: 'securityFeatures',
  maintenanceSchedule: 'maintenanceSchedule',
  energyEfficiencyRating: 'energyEfficiencyRating',
  environmentalControls: 'environmentalControls',
  isActive: 'isActive',
  isRestricted: 'isRestricted',
  accessLevel: 'accessLevel',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoomScalarFieldEnum = {
  id: 'id',
  hospitalId: 'hospitalId',
  departmentId: 'departmentId',
  floorId: 'floorId',
  wardId: 'wardId',
  roomTypeId: 'roomTypeId',
  roomNumber: 'roomNumber',
  roomName: 'roomName',
  roomType: 'roomType',
  category: 'category',
  capacity: 'capacity',
  currentOccupancy: 'currentOccupancy',
  area: 'area',
  amenities: 'amenities',
  equipment: 'equipment',
  facilities: 'facilities',
  accessibilityFeatures: 'accessibilityFeatures',
  pricing: 'pricing',
  maintenanceSchedule: 'maintenanceSchedule',
  cleaningProtocol: 'cleaningProtocol',
  infectionControlMeasures: 'infectionControlMeasures',
  emergencyEquipment: 'emergencyEquipment',
  communicationSystems: 'communicationSystems',
  entertainmentSystems: 'entertainmentSystems',
  climateControl: 'climateControl',
  lighting: 'lighting',
  powerOutlets: 'powerOutlets',
  networkConnectivity: 'networkConnectivity',
  securityFeatures: 'securityFeatures',
  privacyLevel: 'privacyLevel',
  isActive: 'isActive',
  isOccupied: 'isOccupied',
  isUnderMaintenance: 'isUnderMaintenance',
  isQuarantined: 'isQuarantined',
  lastSanitized: 'lastSanitized',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BedScalarFieldEnum = {
  id: 'id',
  hospitalId: 'hospitalId',
  roomId: 'roomId',
  departmentId: 'departmentId',
  wardId: 'wardId',
  patientId: 'patientId',
  bedTypeId: 'bedTypeId',
  bedNumber: 'bedNumber',
  bedType: 'bedType',
  bedCategory: 'bedCategory',
  bedStatus: 'bedStatus',
  features: 'features',
  equipment: 'equipment',
  monitoring: 'monitoring',
  safety: 'safety',
  comfort: 'comfort',
  pricing: 'pricing',
  lastMaintenance: 'lastMaintenance',
  lastCleaning: 'lastCleaning',
  maintenanceSchedule: 'maintenanceSchedule',
  cleaningProtocol: 'cleaningProtocol',
  isActive: 'isActive',
  isElectronic: 'isElectronic',
  hasOxygen: 'hasOxygen',
  hasSuction: 'hasSuction',
  hasMonitor: 'hasMonitor',
  hasIV: 'hasIV',
  weight: 'weight',
  dimensions: 'dimensions',
  manufacturer: 'manufacturer',
  model: 'model',
  serialNumber: 'serialNumber',
  warrantyExpiry: 'warrantyExpiry',
  acquisitionDate: 'acquisitionDate',
  lastInspection: 'lastInspection',
  nextInspection: 'nextInspection',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WardScalarFieldEnum = {
  id: 'id',
  hospitalId: 'hospitalId',
  floorId: 'floorId',
  wardNumber: 'wardNumber',
  wardName: 'wardName',
  wardType: 'wardType',
  capacity: 'capacity',
  currentOccupancy: 'currentOccupancy',
  nursingStation: 'nursingStation',
  facilities: 'facilities',
  equipment: 'equipment',
  protocols: 'protocols',
  staffAllocation: 'staffAllocation',
  operatingHours: 'operatingHours',
  visitingHours: 'visitingHours',
  securityLevel: 'securityLevel',
  accessControl: 'accessControl',
  emergencyProcedures: 'emergencyProcedures',
  infectionControl: 'infectionControl',
  qualityMetrics: 'qualityMetrics',
  patientSatisfaction: 'patientSatisfaction',
  isActive: 'isActive',
  isIsolationWard: 'isIsolationWard',
  supportsVentilation: 'supportsVentilation',
  hasNegativePressure: 'hasNegativePressure',
  doctorInChargeId: 'doctorInChargeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StaffScalarFieldEnum = {
  id: 'id',
  hospitalId: 'hospitalId',
  departmentId: 'departmentId',
  employeeId: 'employeeId',
  personalDetails: 'personalDetails',
  contactDetails: 'contactDetails',
  emergencyContacts: 'emergencyContacts',
  identificationDocuments: 'identificationDocuments',
  professionalDetails: 'professionalDetails',
  qualifications: 'qualifications',
  certifications: 'certifications',
  licenses: 'licenses',
  specializations: 'specializations',
  experience: 'experience',
  performanceMetrics: 'performanceMetrics',
  employmentDetails: 'employmentDetails',
  contractDetails: 'contractDetails',
  payrollInformation: 'payrollInformation',
  benefits: 'benefits',
  workSchedule: 'workSchedule',
  permissions: 'permissions',
  accessLevel: 'accessLevel',
  systemAccess: 'systemAccess',
  loginCredentials: 'loginCredentials',
  roleId: 'roleId',
  status: 'status',
  isActive: 'isActive',
  canLogin: 'canLogin',
  lastLogin: 'lastLogin',
  passwordChangedAt: 'passwordChangedAt',
  twoFactorEnabled: 'twoFactorEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  hospitalId: 'hospitalId',
  patientNumber: 'patientNumber',
  mrn: 'mrn',
  abhaId: 'abhaId',
  qrCode: 'qrCode',
  barcode: 'barcode',
  personalDetails: 'personalDetails',
  contactDetails: 'contactDetails',
  emergencyContacts: 'emergencyContacts',
  demographics: 'demographics',
  identificationDocuments: 'identificationDocuments',
  bloodGroup: 'bloodGroup',
  rhFactor: 'rhFactor',
  allergies: 'allergies',
  chronicConditions: 'chronicConditions',
  familyHistory: 'familyHistory',
  socialHistory: 'socialHistory',
  medicalHistory: 'medicalHistory',
  surgicalHistory: 'surgicalHistory',
  medicationHistory: 'medicationHistory',
  immunizationRecords: 'immunizationRecords',
  insuranceDetails: 'insuranceDetails',
  financialInformation: 'financialInformation',
  paymentPreferences: 'paymentPreferences',
  creditLimit: 'creditLimit',
  outstandingAmount: 'outstandingAmount',
  preferences: 'preferences',
  communicationPreferences: 'communicationPreferences',
  culturalConsiderations: 'culturalConsiderations',
  dietaryRestrictions: 'dietaryRestrictions',
  religiousPreferences: 'religiousPreferences',
  languagePreferences: 'languagePreferences',
  riskFactors: 'riskFactors',
  fallRiskScore: 'fallRiskScore',
  infectionRiskLevel: 'infectionRiskLevel',
  medicationRiskFactors: 'medicationRiskFactors',
  biometricData: 'biometricData',
  wearableDeviceData: 'wearableDeviceData',
  digitalHealthRecords: 'digitalHealthRecords',
  telemedicinePreferences: 'telemedicinePreferences',
  consentStatus: 'consentStatus',
  privacySettings: 'privacySettings',
  dataSharingPreferences: 'dataSharingPreferences',
  patientType: 'patientType',
  patientStatus: 'patientStatus',
  mobilityStatus: 'mobilityStatus',
  mentalStatus: 'mentalStatus',
  communicationBarriers: 'communicationBarriers',
  patientSafetyAlerts: 'patientSafetyAlerts',
  clinicalAlerts: 'clinicalAlerts',
  drugInteractionAlerts: 'drugInteractionAlerts',
  visitFrequency: 'visitFrequency',
  loyaltyProgramStatus: 'loyaltyProgramStatus',
  satisfactionScores: 'satisfactionScores',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PatientVisitScalarFieldEnum = {
  id: 'id',
  hospitalId: 'hospitalId',
  patientId: 'patientId',
  visitNumber: 'visitNumber',
  appointmentId: 'appointmentId',
  visitType: 'visitType',
  visitCategory: 'visitCategory',
  departmentId: 'departmentId',
  doctorId: 'doctorId',
  nurseId: 'nurseId',
  attendingStaff: 'attendingStaff',
  attendingPhysicianId: 'attendingPhysicianId',
  referringPhysicianId: 'referringPhysicianId',
  chiefComplaint: 'chiefComplaint',
  visitReason: 'visitReason',
  referralSource: 'referralSource',
  priority: 'priority',
  status: 'status',
  scheduledDateTime: 'scheduledDateTime',
  checkinTime: 'checkinTime',
  consultationStartTime: 'consultationStartTime',
  consultationEndTime: 'consultationEndTime',
  dischargeTime: 'dischargeTime',
  totalWaitTime: 'totalWaitTime',
  totalConsultationTime: 'totalConsultationTime',
  vitalSigns: 'vitalSigns',
  symptoms: 'symptoms',
  diagnosis: 'diagnosis',
  treatment: 'treatment',
  prescriptions: 'prescriptions',
  procedures: 'procedures',
  labTests: 'labTests',
  imaging: 'imaging',
  insurance: 'insurance',
  billing: 'billing',
  payments: 'payments',
  documents: 'documents',
  notes: 'notes',
  followUpInstructions: 'followUpInstructions',
  nextAppointment: 'nextAppointment',
  satisfactionRating: 'satisfactionRating',
  feedback: 'feedback',
  qualityMetrics: 'qualityMetrics',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExaminationTemplateScalarFieldEnum = {
  id: 'id',
  hospitalId: 'hospitalId',
  departmentId: 'departmentId',
  templateName: 'templateName',
  templateType: 'templateType',
  specialtyArea: 'specialtyArea',
  description: 'description',
  sections: 'sections',
  fields: 'fields',
  validations: 'validations',
  scoring: 'scoring',
  defaultValues: 'defaultValues',
  conditionalLogic: 'conditionalLogic',
  printLayout: 'printLayout',
  digitalSignature: 'digitalSignature',
  version: 'version',
  isActive: 'isActive',
  isDefault: 'isDefault',
  createdBy: 'createdBy',
  approvedBy: 'approvedBy',
  approvalDate: 'approvalDate',
  lastModified: 'lastModified',
  usageCount: 'usageCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoomTypeScalarFieldEnum = {
  id: 'id',
  typeName: 'typeName',
  typeCode: 'typeCode',
  category: 'category',
  defaultCapacity: 'defaultCapacity',
  equipmentRequirements: 'equipmentRequirements',
  spaceRequirements: 'spaceRequirements',
  specialFeatures: 'specialFeatures',
  infectionControlLevel: 'infectionControlLevel',
  airChangesPerHour: 'airChangesPerHour',
  pressureRequirements: 'pressureRequirements',
  temperatureRange: 'temperatureRange',
  humidityRange: 'humidityRange',
  noiseLevelLimits: 'noiseLevelLimits',
  lightingRequirements: 'lightingRequirements',
  medicalGasRequirements: 'medicalGasRequirements',
  powerRequirements: 'powerRequirements',
  networkRequirements: 'networkRequirements',
  accessibilityFeatures: 'accessibilityFeatures',
  costPerHour: 'costPerHour',
  costPerDay: 'costPerDay'
};

exports.Prisma.BedTypeScalarFieldEnum = {
  id: 'id',
  typeName: 'typeName',
  typeCode: 'typeCode',
  category: 'category',
  medicalGrade: 'medicalGrade',
  features: 'features',
  equipmentIncluded: 'equipmentIncluded',
  maintenanceRequirements: 'maintenanceRequirements',
  dailyCharge: 'dailyCharge',
  hourlyCharge: 'hourlyCharge',
  setupTimeMinutes: 'setupTimeMinutes',
  cleaningTimeMinutes: 'cleaningTimeMinutes',
  specifications: 'specifications',
  manufacturerDetails: 'manufacturerDetails',
  warrantyInformation: 'warrantyInformation',
  complianceCertifications: 'complianceCertifications'
};

exports.Prisma.RoleCategoryScalarFieldEnum = {
  id: 'id',
  categoryName: 'categoryName',
  categoryDescription: 'categoryDescription',
  hierarchyLevel: 'hierarchyLevel',
  parentCategoryId: 'parentCategoryId',
  reportingStructure: 'reportingStructure',
  escalationMatrix: 'escalationMatrix',
  authorityLevels: 'authorityLevels',
  responsibilityMatrix: 'responsibilityMatrix'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  roleName: 'roleName',
  roleCode: 'roleCode',
  roleType: 'roleType',
  roleDescription: 'roleDescription',
  permissions: 'permissions',
  hierarchyLevel: 'hierarchyLevel',
  reportingStructure: 'reportingStructure',
  responsibilities: 'responsibilities',
  requiredQualifications: 'requiredQualifications',
  certificationRequirements: 'certificationRequirements',
  experienceRequirements: 'experienceRequirements',
  salaryRange: 'salaryRange',
  performanceMetrics: 'performanceMetrics',
  trainingRequirements: 'trainingRequirements',
  continuingEducation: 'continuingEducation',
  legalRequirements: 'legalRequirements',
  backgroundCheckLevel: 'backgroundCheckLevel',
  securityClearanceRequired: 'securityClearanceRequired',
  isPatientFacing: 'isPatientFacing',
  isClinicalRole: 'isClinicalRole',
  isAdministrativeRole: 'isAdministrativeRole',
  shiftPatterns: 'shiftPatterns',
  onCallRequirements: 'onCallRequirements',
  delegationAuthority: 'delegationAuthority',
  approvalLimits: 'approvalLimits',
  systemAccessLevels: 'systemAccessLevels',
  dataAccessRestrictions: 'dataAccessRestrictions',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.DoctorScalarFieldEnum = {
  id: 'id',
  doctorType: 'doctorType',
  medicalRegistrationNumber: 'medicalRegistrationNumber',
  medicalCouncil: 'medicalCouncil',
  registrationDate: 'registrationDate',
  registrationExpiryDate: 'registrationExpiryDate',
  medicalDegree: 'medicalDegree',
  specialization: 'specialization',
  subSpecialization: 'subSpecialization',
  fellowshipDetails: 'fellowshipDetails',
  boardCertifications: 'boardCertifications',
  consultationFee: 'consultationFee',
  followUpFee: 'followUpFee',
  surgeryFee: 'surgeryFee',
  procedureFees: 'procedureFees',
  availableDays: 'availableDays',
  consultationDuration: 'consultationDuration',
  maxPatientsPerDay: 'maxPatientsPerDay',
  maxPatientsPerSession: 'maxPatientsPerSession',
  appointmentSlots: 'appointmentSlots',
  breakTimes: 'breakTimes',
  autoAssignmentPriority: 'autoAssignmentPriority',
  telemedicineEnabled: 'telemedicineEnabled',
  homeVisitAvailable: 'homeVisitAvailable',
  emergencyOnCall: 'emergencyOnCall',
  patientSatisfactionRating: 'patientSatisfactionRating',
  averageConsultationTime: 'averageConsultationTime',
  appointmentAdherenceRate: 'appointmentAdherenceRate',
  patientOutcomeScores: 'patientOutcomeScores',
  complicationRates: 'complicationRates',
  readmissionRates: 'readmissionRates',
  researchInterests: 'researchInterests',
  publications: 'publications',
  conferencesAttended: 'conferencesAttended',
  teachingResponsibilities: 'teachingResponsibilities',
  mentorshipRoles: 'mentorshipRoles',
  malpracticeHistory: 'malpracticeHistory',
  disciplinaryActions: 'disciplinaryActions',
  qualityImprovementParticipation: 'qualityImprovementParticipation',
  safetyTrainingCompletion: 'safetyTrainingCompletion',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NurseScalarFieldEnum = {
  id: 'id',
  nursingRegistrationNumber: 'nursingRegistrationNumber',
  nursingCouncil: 'nursingCouncil',
  nursingDegree: 'nursingDegree',
  specialization: 'specialization',
  certificationLevel: 'certificationLevel',
  yearsOfExperience: 'yearsOfExperience',
  clinicalSpecializations: 'clinicalSpecializations',
  technicalSkills: 'technicalSkills',
  equipmentCertifications: 'equipmentCertifications',
  preferredShifts: 'preferredShifts',
  wardPreferences: 'wardPreferences',
  patientTypePreferences: 'patientTypePreferences',
  patientCareQualityScore: 'patientCareQualityScore',
  medicationAdministrationAccuracy: 'medicationAdministrationAccuracy',
  documentationQualityScore: 'documentationQualityScore',
  createdAt: 'createdAt'
};

exports.Prisma.UserCredentialScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  credentialType: 'credentialType',
  credentialDataHash: 'credentialDataHash',
  salt: 'salt',
  algorithm: 'algorithm',
  keyDerivationParams: 'keyDerivationParams',
  isPrimary: 'isPrimary',
  isActive: 'isActive',
  createdAt: 'createdAt',
  lastUsed: 'lastUsed',
  expiresAt: 'expiresAt',
  failedAttempts: 'failedAttempts',
  lockoutUntil: 'lockoutUntil',
  passwordHistory: 'passwordHistory',
  twoFactorEnabled: 'twoFactorEnabled',
  backupCodes: 'backupCodes',
  deviceRegistrations: 'deviceRegistrations'
};

exports.Prisma.MfaConfigurationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  methodType: 'methodType',
  methodDetails: 'methodDetails',
  secretKeyEncrypted: 'secretKeyEncrypted',
  backupCodes: 'backupCodes',
  recoveryCodes: 'recoveryCodes',
  isPrimary: 'isPrimary',
  isEnabled: 'isEnabled',
  verificationAttempts: 'verificationAttempts',
  lastVerified: 'lastVerified',
  setupCompletedAt: 'setupCompletedAt',
  lastUsed: 'lastUsed',
  deviceTrustSettings: 'deviceTrustSettings',
  locationRestrictions: 'locationRestrictions'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionTokenHash: 'sessionTokenHash',
  refreshTokenHash: 'refreshTokenHash',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  deviceInfo: 'deviceInfo',
  locationInfo: 'locationInfo',
  loginTimestamp: 'loginTimestamp',
  lastActivity: 'lastActivity',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  logoutTimestamp: 'logoutTimestamp',
  logoutReason: 'logoutReason',
  sessionType: 'sessionType',
  securityLevel: 'securityLevel',
  privilegedOperations: 'privilegedOperations',
  concurrentSessions: 'concurrentSessions',
  deviceTrusted: 'deviceTrusted'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  permissionName: 'permissionName',
  permissionCode: 'permissionCode',
  module: 'module',
  action: 'action',
  resource: 'resource',
  description: 'description',
  permissionType: 'permissionType',
  sensitivityLevel: 'sensitivityLevel',
  complianceRequirements: 'complianceRequirements',
  auditRequired: 'auditRequired',
  delegationAllowed: 'delegationAllowed',
  temporaryGrantAllowed: 'temporaryGrantAllowed',
  approvalRequired: 'approvalRequired',
  conditions: 'conditions',
  isSystem: 'isSystem',
  createdAt: 'createdAt'
};

exports.Prisma.RolePermissionScalarFieldEnum = {
  id: 'id',
  roleId: 'roleId',
  permissionId: 'permissionId',
  granted: 'granted',
  conditions: 'conditions',
  timeRestrictions: 'timeRestrictions',
  locationRestrictions: 'locationRestrictions',
  dataRestrictions: 'dataRestrictions',
  approvalWorkflow: 'approvalWorkflow',
  grantedBy: 'grantedBy',
  grantedAt: 'grantedAt',
  expiresAt: 'expiresAt',
  lastReviewed: 'lastReviewed',
  reviewFrequency: 'reviewFrequency',
  isInherited: 'isInherited',
  overrideReason: 'overrideReason'
};

exports.Prisma.OauthClientScalarFieldEnum = {
  id: 'id',
  clientSecretHash: 'clientSecretHash',
  clientName: 'clientName',
  clientType: 'clientType',
  redirectUris: 'redirectUris',
  allowedScopes: 'allowedScopes',
  allowedGrantTypes: 'allowedGrantTypes',
  accessTokenLifetime: 'accessTokenLifetime',
  refreshTokenLifetime: 'refreshTokenLifetime',
  pkceRequired: 'pkceRequired',
  confidential: 'confidential',
  autoApprove: 'autoApprove',
  additionalInformation: 'additionalInformation',
  createdBy: 'createdBy',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.OauthAccessTokenScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  userId: 'userId',
  accessTokenHash: 'accessTokenHash',
  refreshTokenHash: 'refreshTokenHash',
  scopes: 'scopes',
  tokenType: 'tokenType',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  revokedAt: 'revokedAt',
  revocationReason: 'revocationReason',
  additionalInformation: 'additionalInformation'
};

exports.Prisma.Icd10CodeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  description: 'description',
  category: 'category',
  subcategory: 'subcategory',
  chapter: 'chapter',
  block: 'block',
  version: 'version',
  billable: 'billable',
  genderSpecific: 'genderSpecific',
  ageRestrictions: 'ageRestrictions',
  synonyms: 'synonyms',
  includes: 'includes',
  excludes: 'excludes',
  notes: 'notes',
  severityLevels: 'severityLevels',
  clinicalGuidelines: 'clinicalGuidelines',
  mortalityIndicator: 'mortalityIndicator',
  morbidityIndicator: 'morbidityIndicator',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.Icd11CodeScalarFieldEnum = {
  id: 'id',
  foundationId: 'foundationId',
  entityId: 'entityId',
  code: 'code',
  title: 'title',
  definition: 'definition',
  parentId: 'parentId',
  chapter: 'chapter',
  blockTitle: 'blockTitle',
  codingNote: 'codingNote',
  inclusionTerms: 'inclusionTerms',
  exclusionTerms: 'exclusionTerms',
  indexTerms: 'indexTerms',
  synonyms: 'synonyms',
  narrowerTerms: 'narrowerTerms',
  broaderTerms: 'broaderTerms',
  fullySpecifiedName: 'fullySpecifiedName',
  classificationProperties: 'classificationProperties',
  mortalityCoding: 'mortalityCoding',
  morbidityCoding: 'morbidityCoding',
  primaryCareLowSettings: 'primaryCareLowSettings',
  specialtyAdaptations: 'specialtyAdaptations',
  functioningProperties: 'functioningProperties',
  anatomicalProperties: 'anatomicalProperties',
  severityProperties: 'severityProperties',
  temporalProperties: 'temporalProperties',
  releaseVersion: 'releaseVersion',
  linearization: 'linearization',
  browserUrl: 'browserUrl',
  apiUrl: 'apiUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DiseaseScalarFieldEnum = {
  id: 'id',
  icd10CodeId: 'icd10CodeId',
  icd11CodeId: 'icd11CodeId',
  diseaseName: 'diseaseName',
  commonNames: 'commonNames',
  specialty: 'specialty',
  subspecialty: 'subspecialty',
  diseaseCategory: 'diseaseCategory',
  pathophysiology: 'pathophysiology',
  etiology: 'etiology',
  riskFactors: 'riskFactors',
  symptoms: 'symptoms',
  signs: 'signs',
  diagnosticCriteria: 'diagnosticCriteria',
  differentialDiagnosis: 'differentialDiagnosis',
  complications: 'complications',
  prognosis: 'prognosis',
  treatmentProtocols: 'treatmentProtocols',
  medicationProtocols: 'medicationProtocols',
  surgicalOptions: 'surgicalOptions',
  rehabilitationProtocols: 'rehabilitationProtocols',
  lifestyleModifications: 'lifestyleModifications',
  preventionMeasures: 'preventionMeasures',
  followUpSchedule: 'followUpSchedule',
  researchNotes: 'researchNotes',
  clinicalTrials: 'clinicalTrials',
  evidenceBase: 'evidenceBase',
  guidelinesReferences: 'guidelinesReferences',
  prevalenceData: 'prevalenceData',
  incidenceData: 'incidenceData',
  demographicPatterns: 'demographicPatterns',
  geographicalDistribution: 'geographicalDistribution',
  seasonalPatterns: 'seasonalPatterns',
  severityClassification: 'severityClassification',
  functionalImpact: 'functionalImpact',
  environmentalFactors: 'environmentalFactors',
  geneticFactors: 'geneticFactors',
  isNotifiable: 'isNotifiable',
  notificationRequirements: 'notificationRequirements',
  reportingRequirements: 'reportingRequirements',
  isChronic: 'isChronic',
  isHereditary: 'isHereditary',
  isContagious: 'isContagious',
  isRareDisease: 'isRareDisease',
  supportedLanguages: 'supportedLanguages',
  clinicalGuidelinesUrl: 'clinicalGuidelinesUrl',
  patientEducationMaterials: 'patientEducationMaterials',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExaminationScalarFieldEnum = {
  id: 'id',
  visitId: 'visitId',
  templateId: 'templateId',
  doctorId: 'doctorId',
  examinationType: 'examinationType',
  examinationDate: 'examinationDate',
  vitalSigns: 'vitalSigns',
  physicalExamination: 'physicalExamination',
  systemExamination: 'systemExamination',
  neurologicalExamination: 'neurologicalExamination',
  mentalStatusExamination: 'mentalStatusExamination',
  functionalAssessment: 'functionalAssessment',
  anthropometricMeasurements: 'anthropometricMeasurements',
  laboratoryValues: 'laboratoryValues',
  imagingFindings: 'imagingFindings',
  diagnosticTestResults: 'diagnosticTestResults',
  findings: 'findings',
  clinicalImpressions: 'clinicalImpressions',
  assessment: 'assessment',
  plan: 'plan',
  images: 'images',
  videos: 'videos',
  audioRecordings: 'audioRecordings',
  documents: 'documents',
  preliminaryDiagnosis: 'preliminaryDiagnosis',
  differentialDiagnosis: 'differentialDiagnosis',
  finalDiagnosis: 'finalDiagnosis',
  diagnosticConfidence: 'diagnosticConfidence',
  recommendations: 'recommendations',
  treatmentPlan: 'treatmentPlan',
  medicationRecommendations: 'medicationRecommendations',
  followUpRequirements: 'followUpRequirements',
  riskAssessment: 'riskAssessment',
  safetyAlerts: 'safetyAlerts',
  drugInteractions: 'drugInteractions',
  contraindications: 'contraindications',
  followUpRequired: 'followUpRequired',
  followUpDate: 'followUpDate',
  qualityScore: 'qualityScore',
  status: 'status',
  reviewedBy: 'reviewedBy',
  reviewDate: 'reviewDate',
  approvedBy: 'approvedBy',
  approvalDate: 'approvalDate',
  examinationDuration: 'examinationDuration',
  completenessScore: 'completenessScore',
  accuracyIndicators: 'accuracyIndicators',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DiagnosisScalarFieldEnum = {
  id: 'id',
  visitId: 'visitId',
  examinationId: 'examinationId',
  diseaseId: 'diseaseId',
  doctorId: 'doctorId',
  diagnosisType: 'diagnosisType',
  diagnosisDate: 'diagnosisDate',
  diagnosisMethod: 'diagnosisMethod',
  confidenceLevel: 'confidenceLevel',
  severity: 'severity',
  stage: 'stage',
  grade: 'grade',
  anatomicalLocation: 'anatomicalLocation',
  affectedSystems: 'affectedSystems',
  laterality: 'laterality',
  onsetDate: 'onsetDate',
  duration: 'duration',
  progression: 'progression',
  supportingEvidence: 'supportingEvidence',
  diagnosticCriteriaMet: 'diagnosticCriteriaMet',
  laboratoryEvidence: 'laboratoryEvidence',
  imagingEvidence: 'imagingEvidence',
  pathologyEvidence: 'pathologyEvidence',
  treatmentResponse: 'treatmentResponse',
  prognosis: 'prognosis',
  expectedOutcome: 'expectedOutcome',
  functionalImpact: 'functionalImpact',
  isPrimary: 'isPrimary',
  billable: 'billable',
  reportable: 'reportable',
  workRelated: 'workRelated',
  injuryRelated: 'injuryRelated',
  peerReviewed: 'peerReviewed',
  qualityAssured: 'qualityAssured',
  codingReviewed: 'codingReviewed',
  notes: 'notes',
  revisionHistory: 'revisionHistory',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SuperAdminScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SuperAdminCredentialScalarFieldEnum = {
  id: 'id',
  superAdminId: 'superAdminId',
  credentialType: 'credentialType',
  credentialDataHash: 'credentialDataHash',
  isActive: 'isActive',
  createdAt: 'createdAt',
  lastUsed: 'lastUsed',
  failedAttempts: 'failedAttempts',
  lockoutUntil: 'lockoutUntil'
};

exports.Prisma.SuperAdminSessionScalarFieldEnum = {
  id: 'id',
  superAdminId: 'superAdminId',
  sessionTokenHash: 'sessionTokenHash',
  refreshTokenHash: 'refreshTokenHash',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  loginTimestamp: 'loginTimestamp',
  lastActivity: 'lastActivity',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  logoutTimestamp: 'logoutTimestamp'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  HospitalNetwork: 'HospitalNetwork',
  Hospital: 'Hospital',
  DepartmentCategory: 'DepartmentCategory',
  Department: 'Department',
  Floor: 'Floor',
  Room: 'Room',
  Bed: 'Bed',
  Ward: 'Ward',
  Staff: 'Staff',
  Patient: 'Patient',
  PatientVisit: 'PatientVisit',
  ExaminationTemplate: 'ExaminationTemplate',
  RoomType: 'RoomType',
  BedType: 'BedType',
  RoleCategory: 'RoleCategory',
  Role: 'Role',
  Doctor: 'Doctor',
  Nurse: 'Nurse',
  UserCredential: 'UserCredential',
  MfaConfiguration: 'MfaConfiguration',
  UserSession: 'UserSession',
  Permission: 'Permission',
  RolePermission: 'RolePermission',
  OauthClient: 'OauthClient',
  OauthAccessToken: 'OauthAccessToken',
  Icd10Code: 'Icd10Code',
  Icd11Code: 'Icd11Code',
  Disease: 'Disease',
  Examination: 'Examination',
  Diagnosis: 'Diagnosis',
  SuperAdmin: 'SuperAdmin',
  SuperAdminCredential: 'SuperAdminCredential',
  SuperAdminSession: 'SuperAdminSession'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
