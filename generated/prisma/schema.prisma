// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================= 
// CORE ORGANIZATION & INFRASTRUCTURE 
// ============================================================================= 

// Hospital Network Management
model HospitalNetwork {
  id                   String   @id @default(cuid())
  networkName          String
  networkCode          String?  @unique
  headquartersAddress  String?
  registrationNumber   String?
  taxId                String?
  gstin                String?
  primaryContact       Json?
  configuration        Json?
  networkType          String? // corporate, government, trust, private
  accreditationDetails Json?
  regulatoryCompliance Json?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  hospitals Hospital[]

  @@map("hospital_networks")
}

// Enhanced Hospitals with Comprehensive Details
model Hospital {
  id                       String   @id @default(cuid())
  networkId                String?
  name                     String
  hospitalCode             String?  @unique
  hospitalType             String? // general, specialty, super_specialty, clinic, diagnostic, rehabilitation, maternity, psychiatric, oncology
  accreditationDetails     Json?
  licenseDetails           Json?
  address                  String?
  coordinates              Json? // Point coordinates
  contactDetails           Json?
  facilities               Json?
  capacityDetails          Json?
  operationalHours         Json?
  emergencyServices        Boolean  @default(false)
  traumaCenterLevel        String?
  teachingHospital         Boolean  @default(false)
  researchFacility         Boolean  @default(false)
  telemedicineEnabled      Boolean  @default(false)
  digitalHealthIntegration Json?
  abdmRegistration         Json?
  configuration            Json?
  timezone                 String   @default("Asia/Kolkata")
  currency                 String   @default("INR")
  supportedLanguages       String[] @default(["en", "hi"])
  isActive                 Boolean  @default(true)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  // Relations
  network              HospitalNetwork?      @relation(fields: [networkId], references: [id])
  departments          Department[]
  floors               Floor[]
  rooms                Room[]
  beds                 Bed[]
  wards                Ward[]
  staff                Staff[]
  patients             Patient[]
  patientVisits        PatientVisit[]
  examinationTemplates ExaminationTemplate[]

  @@map("hospitals")
}

// Department Categories and Hierarchy
model DepartmentCategory {
  id                 String  @id @default(cuid())
  categoryName       String
  categoryCode       String? @unique
  description        String?
  icon               String?
  colorCode          String?
  parentCategoryId   String?
  hierarchyLevel     Int     @default(1)
  specializationType String? // medical, surgical, diagnostic, administrative

  // Relations
  parentCategory DepartmentCategory?  @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  subCategories  DepartmentCategory[] @relation("CategoryHierarchy")
  departments    Department[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("department_categories")
}

// Departments with Enhanced Functionality
model Department {
  id                    String   @id @default(cuid())
  hospitalId            String
  categoryId            String?
  floorId               String?
  parentDepartmentId    String?
  name                  String
  code                  String?
  description           String?
  departmentType        String? // inpatient, outpatient, emergency, diagnostic, support, administrative
  specialtyType         String? // primary_care, specialty, super_specialty
  services              Json?
  operatingHours        Json?
  contactInfo           Json?
  staffCapacity         Json?
  equipmentInventory    Json?
  roomAllocations       Json?
  appointmentSettings   Json?
  emergencyProtocols    Json?
  qualityMetrics        Json?
  budgetAllocation      Float?
  revenueTarget         Float?
  performanceKPIs       Json?
  accreditations        Json?
  certifications        Json?
  protocols             Json?
  guidelines            Json?
  isActive              Boolean  @default(true)
  isEmergencyDepartment Boolean  @default(false)
  acceptsWalkIns        Boolean  @default(true)
  requiresReferral      Boolean  @default(false)
  supportsTelemedicine  Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  hospital             Hospital              @relation(fields: [hospitalId], references: [id])
  category             DepartmentCategory?   @relation(fields: [categoryId], references: [id])
  floor                Floor?                @relation(fields: [floorId], references: [id])
  parentDepartment     Department?           @relation("DepartmentHierarchy", fields: [parentDepartmentId], references: [id])
  subDepartments       Department[]          @relation("DepartmentHierarchy")
  staff                Staff[]
  rooms                Room[]
  beds                 Bed[]
  patientVisits        PatientVisit[]
  examinationTemplates ExaminationTemplate[]

  @@map("departments")
}

// Enhanced Floor Management
model Floor {
  id                     String   @id @default(cuid())
  hospitalId             String
  floorNumber            Int
  floorName              String?
  floorType              String? // ground, general, icu, ot, admin, basement, rooftop
  totalArea              Float?
  usableArea             Float?
  capacity               Json?
  facilities             Json?
  accessibilityFeatures  Json?
  emergencyExits         Json?
  fireSystemDetails      Json?
  securityFeatures       Json?
  maintenanceSchedule    Json?
  energyEfficiencyRating String?
  environmentalControls  Json?
  isActive               Boolean  @default(true)
  isRestricted           Boolean  @default(false)
  accessLevel            String? // public, staff, authorized, vip
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  hospital    Hospital     @relation(fields: [hospitalId], references: [id])
  departments Department[]
  rooms       Room[]
  wards       Ward[]

  @@unique([hospitalId, floorNumber])
  @@map("floors")
}

// Comprehensive Room Management
model Room {
  id                       String    @id @default(cuid())
  hospitalId               String
  departmentId             String?
  floorId                  String?
  wardId                   String?
  roomTypeId               String?
  roomNumber               String
  roomName                 String?
  roomType                 String? // patient, ot, icu, consultation, diagnostic, procedure, storage, office
  category                 String? // general, private, semi_private, deluxe, suite, isolation
  capacity                 Int       @default(1)
  currentOccupancy         Int       @default(0)
  area                     Float?
  amenities                Json?
  equipment                Json?
  facilities               Json?
  accessibilityFeatures    Json?
  pricing                  Json?
  maintenanceSchedule      Json?
  cleaningProtocol         Json?
  infectionControlMeasures Json?
  emergencyEquipment       Json?
  communicationSystems     Json?
  entertainmentSystems     Json?
  climateControl           Json?
  lighting                 Json?
  powerOutlets             Json?
  networkConnectivity      Json?
  securityFeatures         Json?
  privacyLevel             String?
  isActive                 Boolean   @default(true)
  isOccupied               Boolean   @default(false)
  isUnderMaintenance       Boolean   @default(false)
  isQuarantined            Boolean   @default(false)
  lastSanitized            DateTime?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  // Relations
  hospital         Hospital    @relation(fields: [hospitalId], references: [id])
  department       Department? @relation(fields: [departmentId], references: [id])
  floor            Floor?      @relation(fields: [floorId], references: [id])
  ward             Ward?       @relation(fields: [wardId], references: [id])
  roomTypeRelation RoomType?   @relation(fields: [roomTypeId], references: [id])
  beds             Bed[]

  @@unique([hospitalId, roomNumber])
  @@map("rooms")
}

// Enhanced Bed Management with Real-time Tracking
model Bed {
  id                  String    @id @default(cuid())
  hospitalId          String
  roomId              String?
  departmentId        String?
  wardId              String?
  patientId           String?
  bedTypeId           String?
  bedNumber           String
  bedType             String? // standard, icu, nicu, maternity, bariatric, pediatric, isolation
  bedCategory         String? // general, private, semi_private, economy, premium
  bedStatus           String    @default("available") // available, occupied, maintenance, reserved, blocked
  features            Json?
  equipment           Json?
  monitoring          Json?
  safety              Json?
  comfort             Json?
  pricing             Json?
  lastMaintenance     DateTime?
  lastCleaning        DateTime?
  maintenanceSchedule Json?
  cleaningProtocol    Json?
  isActive            Boolean   @default(true)
  isElectronic        Boolean   @default(false)
  hasOxygen           Boolean   @default(false)
  hasSuction          Boolean   @default(false)
  hasMonitor          Boolean   @default(false)
  hasIV               Boolean   @default(false)
  weight              Float?
  dimensions          Json?
  manufacturer        String?
  model               String?
  serialNumber        String?
  warrantyExpiry      DateTime?
  acquisitionDate     DateTime?
  lastInspection      DateTime?
  nextInspection      DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  hospital        Hospital    @relation(fields: [hospitalId], references: [id])
  room            Room?       @relation(fields: [roomId], references: [id])
  department      Department? @relation(fields: [departmentId], references: [id])
  ward            Ward?       @relation(fields: [wardId], references: [id])
  patient         Patient?    @relation(fields: [patientId], references: [id])
  bedTypeRelation BedType?    @relation(fields: [bedTypeId], references: [id])

  @@unique([hospitalId, bedNumber])
  @@map("beds")
}

// Ward Management System
model Ward {
  id                  String   @id @default(cuid())
  hospitalId          String
  floorId             String?
  wardNumber          String
  wardName            String
  wardType            String? // general, icu, nicu, maternity, pediatric, surgical, medical, isolation
  capacity            Int
  currentOccupancy    Int      @default(0)
  nursingStation      Json?
  facilities          Json?
  equipment           Json?
  protocols           Json?
  staffAllocation     Json?
  operatingHours      Json?
  visitingHours       Json?
  securityLevel       String?
  accessControl       Json?
  emergencyProcedures Json?
  infectionControl    Json?
  qualityMetrics      Json?
  patientSatisfaction Json?
  isActive            Boolean  @default(true)
  isIsolationWard     Boolean  @default(false)
  supportsVentilation Boolean  @default(false)
  hasNegativePressure Boolean  @default(false)
  doctorInChargeId    String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  hospital       Hospital @relation(fields: [hospitalId], references: [id])
  floor          Floor?   @relation(fields: [floorId], references: [id])
  rooms          Room[]
  beds           Bed[]
  doctorInCharge Doctor?  @relation("WardDoctorInCharge", fields: [doctorInChargeId], references: [id])

  @@unique([hospitalId, wardNumber])
  @@map("wards")
}

// Comprehensive Staff Management with Role Hierarchies
model Staff {
  id                      String    @id @default(cuid())
  hospitalId              String
  departmentId            String?
  employeeId              String?   @unique
  personalDetails         Json?
  contactDetails          Json?
  emergencyContacts       Json?
  identificationDocuments Json?
  professionalDetails     Json?
  qualifications          Json?
  certifications          Json?
  licenses                Json?
  specializations         Json?
  experience              Json?
  performanceMetrics      Json?
  employmentDetails       Json?
  contractDetails         Json?
  payrollInformation      Json?
  benefits                Json?
  workSchedule            Json?
  permissions             Json?
  accessLevel             String?
  systemAccess            Json?
  loginCredentials        Json?
  role                    Json?
  roleId                  String?
  status                  String    @default("active") // active, inactive, on_leave, terminated
  isActive                Boolean   @default(true)
  canLogin                Boolean   @default(true)
  lastLogin               DateTime?
  passwordChangedAt       DateTime?
  twoFactorEnabled        Boolean   @default(false)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  // Relations
  hospital       Hospital       @relation(fields: [hospitalId], references: [id])
  department     Department?    @relation(fields: [departmentId], references: [id])
  roleAssignment Role?          @relation(fields: [roleId], references: [id])
  patientVisits  PatientVisit[]

  // Enhanced Relations for new models
  doctor                 Doctor?
  nurse                  Nurse?
  userCredentials        UserCredential[]
  mfaConfigurations      MfaConfiguration[]
  userSessions           UserSession[]
  rolePermissionsGranted RolePermission[]
  oauthClientsCreated    OauthClient[]
  oauthAccessTokens      OauthAccessToken[]
  examinations           Examination[]
  diagnoses              Diagnosis[]

  @@map("staff")
}

// Enhanced Patient Management System
model Patient {
  id            String  @id @default(cuid())
  hospitalId    String
  patientNumber String? @unique
  mrn           String? @unique
  abhaId        String?
  qrCode        String?
  barcode       String?

  // Personal Information
  personalDetails         Json? // name, DOB, gender, etc.
  contactDetails          Json? // phone, email, address
  emergencyContacts       Json?
  demographics            Json?
  identificationDocuments Json?

  // Medical Information
  bloodGroup          String?
  rhFactor            String?
  allergies           Json?
  chronicConditions   Json?
  familyHistory       Json?
  socialHistory       Json?
  medicalHistory      Json?
  surgicalHistory     Json?
  medicationHistory   Json?
  immunizationRecords Json?

  // Insurance and Financial
  insuranceDetails     Json?
  financialInformation Json?
  paymentPreferences   Json?
  creditLimit          Float?
  outstandingAmount    Float?

  // Preferences and Settings
  preferences              Json?
  communicationPreferences Json?
  culturalConsiderations   Json?
  dietaryRestrictions      Json?
  religiousPreferences     Json?
  languagePreferences      String[]

  // Risk Assessment
  riskFactors           Json?
  fallRiskScore         Int?
  infectionRiskLevel    String?
  medicationRiskFactors Json?

  // Digital Health
  biometricData           Json?
  wearableDeviceData      Json?
  digitalHealthRecords    Json?
  telemedicinePreferences Json?

  // Privacy and Consent
  consentStatus          Json?
  privacySettings        Json?
  dataSharingPreferences Json?

  // Status and Classification
  patientType           String? // regular, vip, staff, emergency, charity
  patientStatus         String  @default("active")
  mobilityStatus        String?
  mentalStatus          String?
  communicationBarriers Json?

  // Quality and Safety
  patientSafetyAlerts   Json?
  clinicalAlerts        Json?
  drugInteractionAlerts Json?

  // Analytics and Tracking
  visitFrequency       Json?
  loyaltyProgramStatus Json?
  satisfactionScores   Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  hospital      Hospital       @relation(fields: [hospitalId], references: [id])
  beds          Bed[]
  patientVisits PatientVisit[]

  @@map("patients")
}

// Patient Visit Management with Comprehensive Tracking
model PatientVisit {
  id                   String  @id @default(cuid())
  hospitalId           String
  patientId            String
  visitNumber          String? @unique
  appointmentId        String?
  visitType            String? // walk_in, scheduled, emergency, follow_up, consultation
  visitCategory        String? // outpatient, inpatient, emergency, day_care
  departmentId         String?
  doctorId             String?
  nurseId              String?
  attendingStaff       Json?
  attendingPhysicianId String?
  referringPhysicianId String?

  // Visit Details
  chiefComplaint String?
  visitReason    String?
  referralSource String?
  priority       String? // routine, urgent, emergency
  status         String  @default("scheduled") // scheduled, in_progress, completed, cancelled, no_show

  // Timing
  scheduledDateTime     DateTime?
  checkinTime           DateTime?
  consultationStartTime DateTime?
  consultationEndTime   DateTime?
  dischargeTime         DateTime?
  totalWaitTime         Int? // in minutes
  totalConsultationTime Int? // in minutes

  // Clinical Information
  vitalSigns    Json?
  symptoms      Json?
  diagnosis     Json?
  treatment     Json?
  prescriptions Json?
  procedures    Json?
  labTests      Json?
  imaging       Json?

  // Administrative
  insurance            Json?
  billing              Json?
  payments             Json?
  documents            Json?
  notes                Json?
  followUpInstructions Json?
  nextAppointment      Json?

  // Quality and Satisfaction
  satisfactionRating Int?
  feedback           Json?
  qualityMetrics     Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  hospital           Hospital      @relation(fields: [hospitalId], references: [id])
  patient            Patient       @relation(fields: [patientId], references: [id])
  department         Department?   @relation(fields: [departmentId], references: [id])
  doctor             Staff?        @relation(fields: [doctorId], references: [id])
  attendingPhysician Doctor?       @relation("AttendingPhysician", fields: [attendingPhysicianId], references: [id])
  referringPhysician Doctor?       @relation("ReferringPhysician", fields: [referringPhysicianId], references: [id])
  examinations       Examination[]
  diagnoses          Diagnosis[]

  @@map("patient_visits")
}

// Examination Templates for Standardized Care
model ExaminationTemplate {
  id               String    @id @default(cuid())
  hospitalId       String
  departmentId     String?
  templateName     String
  templateType     String? // general, specialty, procedure, screening
  specialtyArea    String?
  description      String?
  sections         Json?
  fields           Json?
  validations      Json?
  scoring          Json?
  defaultValues    Json?
  conditionalLogic Json?
  printLayout      Json?
  digitalSignature Boolean   @default(false)
  version          String    @default("1.0")
  isActive         Boolean   @default(true)
  isDefault        Boolean   @default(false)
  createdBy        String?
  approvedBy       String?
  approvalDate     DateTime?
  lastModified     DateTime?
  usageCount       Int       @default(0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  hospital     Hospital      @relation(fields: [hospitalId], references: [id])
  department   Department?   @relation(fields: [departmentId], references: [id])
  examinations Examination[]

  @@map("examination_templates")
}

// ============================================================================= 
// ROOM AND BED TYPE MANAGEMENT
// ============================================================================= 

// Room Types and Categories
model RoomType {
  id                     String  @id @default(cuid())
  typeName               String
  typeCode               String? @unique
  category               String?
  defaultCapacity        Int?
  equipmentRequirements  Json?
  spaceRequirements      Json?
  specialFeatures        Json?
  infectionControlLevel  String?
  airChangesPerHour      Int?
  pressureRequirements   String? // positive, negative, neutral
  temperatureRange       Json?
  humidityRange          Json?
  noiseLevelLimits       Json?
  lightingRequirements   Json?
  medicalGasRequirements Json?
  powerRequirements      Json?
  networkRequirements    Json?
  accessibilityFeatures  Json?
  costPerHour            Float?
  costPerDay             Float?

  // Relations
  rooms Room[]

  @@map("room_types")
}

// Bed Types and Management
model BedType {
  id                       String  @id @default(cuid())
  typeName                 String
  typeCode                 String? @unique
  category                 String?
  medicalGrade             String?
  features                 Json?
  equipmentIncluded        Json?
  maintenanceRequirements  Json?
  dailyCharge              Float?
  hourlyCharge             Float?
  setupTimeMinutes         Int     @default(30)
  cleaningTimeMinutes      Int     @default(15)
  specifications           Json?
  manufacturerDetails      Json?
  warrantyInformation      Json?
  complianceCertifications Json?

  // Relations
  beds Bed[]

  @@map("bed_types")
}

// ============================================================================= 
// ADVANCED USER MANAGEMENT & SECURITY 
// ============================================================================= 

// Role Categories and Hierarchy
model RoleCategory {
  id                   String  @id @default(cuid())
  categoryName         String
  categoryDescription  String?
  hierarchyLevel       Int?
  parentCategoryId     String?
  reportingStructure   Json?
  escalationMatrix     Json?
  authorityLevels      Json?
  responsibilityMatrix Json?

  // Relations
  parentCategory  RoleCategory?  @relation("RoleCategoryHierarchy", fields: [parentCategoryId], references: [id])
  childCategories RoleCategory[] @relation("RoleCategoryHierarchy")
  roles           Role[]

  @@map("role_categories")
}

// Comprehensive Role Management
model Role {
  id                        String   @id @default(cuid())
  categoryId                String?
  roleName                  String
  roleCode                  String?  @unique
  roleType                  String?
  roleDescription           String?
  permissions               Json?
  hierarchyLevel            Int?
  reportingStructure        Json?
  responsibilities          String[]
  requiredQualifications    Json?
  certificationRequirements Json?
  experienceRequirements    Json?
  salaryRange               Json?
  performanceMetrics        Json?
  trainingRequirements      Json?
  continuingEducation       Json?
  legalRequirements         Json?
  backgroundCheckLevel      String?
  securityClearanceRequired String?
  isPatientFacing           Boolean  @default(false)
  isClinicalRole            Boolean  @default(false)
  isAdministrativeRole      Boolean  @default(false)
  shiftPatterns             Json?
  onCallRequirements        Json?
  delegationAuthority       Json?
  approvalLimits            Json?
  systemAccessLevels        Json?
  dataAccessRestrictions    Json?
  isActive                  Boolean  @default(true)
  createdAt                 DateTime @default(now())

  // Relations
  category        RoleCategory?    @relation(fields: [categoryId], references: [id])
  staff           Staff[]
  rolePermissions RolePermission[]

  @@map("roles")
}

// Doctor-specific Information
model Doctor {
  id                        String    @id @default(cuid())
  doctorType                String? // general_practitioner, specialist, super_specialist, consultant, resident, intern
  medicalRegistrationNumber String?   @unique
  medicalCouncil            String?
  registrationDate          DateTime?
  registrationExpiryDate    DateTime?
  medicalDegree             String?
  specialization            String?
  subSpecialization         String?
  fellowshipDetails         Json?
  boardCertifications       Json?

  // Practice Information
  consultationFee Float?
  followUpFee     Float?
  surgeryFee      Float?
  procedureFees   Json?

  // Availability and Scheduling
  availableDays         Int[]
  consultationDuration  Int   @default(15)
  maxPatientsPerDay     Int?
  maxPatientsPerSession Int?
  appointmentSlots      Json?
  breakTimes            Json?

  // Preferences
  autoAssignmentPriority Int     @default(1)
  telemedicineEnabled    Boolean @default(false)
  homeVisitAvailable     Boolean @default(false)
  emergencyOnCall        Boolean @default(false)

  // Performance Metrics
  patientSatisfactionRating Float?
  averageConsultationTime   Int?
  appointmentAdherenceRate  Float?
  patientOutcomeScores      Json?
  complicationRates         Json?
  readmissionRates          Json?

  // Professional Development
  researchInterests        String[]
  publications             Json?
  conferencesAttended      Json?
  teachingResponsibilities Json?
  mentorshipRoles          Json?

  // Quality and Safety
  malpracticeHistory              Json?
  disciplinaryActions             Json?
  qualityImprovementParticipation Json?
  safetyTrainingCompletion        Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  staff                  Staff          @relation(fields: [id], references: [id])
  wardsInCharge          Ward[]         @relation("WardDoctorInCharge")
  patientVisitsAttending PatientVisit[] @relation("AttendingPhysician")
  patientVisitsReferring PatientVisit[] @relation("ReferringPhysician")
  examinations           Examination[]  @relation("DoctorExaminations")
  diagnoses              Diagnosis[]    @relation("DoctorDiagnoses")
  examinationsReviewed   Examination[]  @relation("ExaminationReviewedBy")
  examinationsApproved   Examination[]  @relation("ExaminationApprovedBy")

  @@map("doctors")
}

// Nursing Staff Information
model Nurse {
  id                        String  @id @default(cuid())
  nursingRegistrationNumber String? @unique
  nursingCouncil            String?
  nursingDegree             String?
  specialization            String?
  certificationLevel        String? // GNM, BSc, MSc, etc.
  yearsOfExperience         Int?

  // Specializations and Skills
  clinicalSpecializations String[]
  technicalSkills         String[]
  equipmentCertifications String[]

  // Work Preferences
  preferredShifts        String[]
  wardPreferences        String[]
  patientTypePreferences String[]

  // Performance Metrics
  patientCareQualityScore          Float?
  medicationAdministrationAccuracy Float?
  documentationQualityScore        Float?

  createdAt DateTime @default(now())

  // Relations
  staff Staff @relation(fields: [id], references: [id])

  @@map("nurses")
}

// Enhanced User Authentication and Security
model UserCredential {
  id                  String    @id @default(cuid())
  userId              String
  credentialType      String?
  credentialDataHash  String?
  salt                String?
  algorithm           String?
  keyDerivationParams Json?
  isPrimary           Boolean   @default(false)
  isActive            Boolean   @default(true)
  createdAt           DateTime  @default(now())
  lastUsed            DateTime?
  expiresAt           DateTime?
  failedAttempts      Int       @default(0)
  lockoutUntil        DateTime?
  passwordHistory     Json?
  twoFactorEnabled    Boolean   @default(false)
  backupCodes         String[]
  deviceRegistrations Json?

  // Relations
  user Staff @relation(fields: [userId], references: [id])

  @@map("user_credentials")
}

// Multi-Factor Authentication
model MfaConfiguration {
  id                   String    @id @default(cuid())
  userId               String
  methodType           String?
  methodDetails        Json?
  secretKeyEncrypted   String?
  backupCodes          String[]
  recoveryCodes        String[]
  isPrimary            Boolean   @default(false)
  isEnabled            Boolean   @default(true)
  verificationAttempts Int       @default(0)
  lastVerified         DateTime?
  setupCompletedAt     DateTime?
  lastUsed             DateTime?
  deviceTrustSettings  Json?
  locationRestrictions Json?

  // Relations
  user Staff @relation(fields: [userId], references: [id])

  @@map("mfa_configurations")
}

// Session Management
model UserSession {
  id                   String    @id @default(cuid())
  userId               String
  sessionTokenHash     String?
  refreshTokenHash     String?
  ipAddress            String?
  userAgent            String?
  deviceInfo           Json?
  locationInfo         Json?
  loginTimestamp       DateTime  @default(now())
  lastActivity         DateTime  @default(now())
  expiresAt            DateTime?
  isActive             Boolean   @default(true)
  logoutTimestamp      DateTime?
  logoutReason         String?
  sessionType          String? // web, mobile, api, kiosk
  securityLevel        String?
  privilegedOperations Json?
  concurrentSessions   Int       @default(1)
  deviceTrusted        Boolean   @default(false)

  // Relations
  user Staff @relation(fields: [userId], references: [id])

  @@map("user_sessions")
}

// Permissions and Access Control
model Permission {
  id                     String   @id @default(cuid())
  permissionName         String
  permissionCode         String?  @unique
  module                 String?
  action                 String?
  resource               String?
  description            String?
  permissionType         String? // system, functional, data, administrative
  sensitivityLevel       String? // public, internal, confidential, restricted
  complianceRequirements String[]
  auditRequired          Boolean  @default(false)
  delegationAllowed      Boolean  @default(false)
  temporaryGrantAllowed  Boolean  @default(false)
  approvalRequired       Boolean  @default(false)
  conditions             Json?
  isSystem               Boolean  @default(false)
  createdAt              DateTime @default(now())

  // Relations
  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id                   String    @id @default(cuid())
  roleId               String
  permissionId         String
  granted              Boolean   @default(true)
  conditions           Json?
  timeRestrictions     Json?
  locationRestrictions Json?
  dataRestrictions     Json?
  approvalWorkflow     Json?
  grantedBy            String?
  grantedAt            DateTime  @default(now())
  expiresAt            DateTime?
  lastReviewed         DateTime?
  reviewFrequency      Int? // days
  isInherited          Boolean   @default(false)
  overrideReason       String?

  // Relations
  role           Role       @relation(fields: [roleId], references: [id])
  permission     Permission @relation(fields: [permissionId], references: [id])
  grantedByStaff Staff?     @relation(fields: [grantedBy], references: [id])

  @@map("role_permissions")
}

// OAuth 2.0 Integration
model OauthClient {
  id                    String   @id @default(cuid())
  clientSecretHash      String?
  clientName            String?
  clientType            String?
  redirectUris          String[]
  allowedScopes         String[]
  allowedGrantTypes     String[]
  accessTokenLifetime   Int      @default(3600)
  refreshTokenLifetime  Int      @default(2592000)
  pkceRequired          Boolean  @default(true)
  confidential          Boolean  @default(true)
  autoApprove           Boolean  @default(false)
  additionalInformation Json?
  createdBy             String?
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())

  // Relations
  createdByStaff Staff?             @relation(fields: [createdBy], references: [id])
  accessTokens   OauthAccessToken[]

  @@map("oauth_clients")
}

model OauthAccessToken {
  id                    String    @id @default(cuid())
  clientId              String
  userId                String?
  accessTokenHash       String?
  refreshTokenHash      String?
  scopes                String[]
  tokenType             String    @default("Bearer")
  expiresAt             DateTime?
  createdAt             DateTime  @default(now())
  revokedAt             DateTime?
  revocationReason      String?
  additionalInformation Json?

  // Relations
  client OauthClient @relation(fields: [clientId], references: [id])
  user   Staff?      @relation(fields: [userId], references: [id])

  @@map("oauth_access_tokens")
}

// ============================================================================= 
// CLINICAL DATA AND DISEASE MANAGEMENT
// ============================================================================= 

// ICD-10 and ICD-11 Integration
model Icd10Code {
  id                 String   @id @default(cuid())
  code               String   @unique
  description        String
  category           String?
  subcategory        String?
  chapter            String?
  block              String?
  version            String?
  billable           Boolean  @default(true)
  genderSpecific     String?
  ageRestrictions    Json?
  synonyms           String[]
  includes           String[]
  excludes           String[]
  notes              String?
  severityLevels     Json?
  clinicalGuidelines Json?
  mortalityIndicator Boolean  @default(false)
  morbidityIndicator Boolean  @default(true)
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())

  // Relations
  diseases Disease[]

  @@map("icd10_codes")
}

model Icd11Code {
  id                       String   @id @default(cuid())
  foundationId             String   @unique
  entityId                 String?
  code                     String?
  title                    Json?
  definition               Json?
  parentId                 String?
  chapter                  String?
  blockTitle               String?
  codingNote               Json?
  inclusionTerms           Json?
  exclusionTerms           Json?
  indexTerms               Json?
  synonyms                 Json?
  narrowerTerms            String[]
  broaderTerms             String[]
  fullySpecifiedName       Json?
  classificationProperties Json?
  mortalityCoding          Boolean  @default(false)
  morbidityCoding          Boolean  @default(false)
  primaryCareLowSettings   Boolean  @default(false)
  specialtyAdaptations     Json?
  functioningProperties    Json?
  anatomicalProperties     Json?
  severityProperties       Json?
  temporalProperties       Json?
  releaseVersion           String?
  linearization            String[]
  browserUrl               String?
  apiUrl                   String?
  isActive                 Boolean  @default(true)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  // Relations
  parent   Icd11Code?  @relation("Icd11Hierarchy", fields: [parentId], references: [id])
  children Icd11Code[] @relation("Icd11Hierarchy")
  diseases Disease[]

  @@map("icd11_codes")
}

// Disease and Condition Management
model Disease {
  id              String  @id @default(cuid())
  icd10CodeId     String?
  icd11CodeId     String?
  diseaseName     Json?
  commonNames     Json?
  specialty       String?
  subspecialty    String?
  diseaseCategory String?

  // Clinical Information
  pathophysiology       Json?
  etiology              Json?
  riskFactors           Json?
  symptoms              Json?
  signs                 Json?
  diagnosticCriteria    Json?
  differentialDiagnosis Json?
  complications         Json?
  prognosis             Json?

  // Treatment and Management
  treatmentProtocols      Json?
  medicationProtocols     Json?
  surgicalOptions         Json?
  rehabilitationProtocols Json?
  lifestyleModifications  Json?
  preventionMeasures      Json?
  followUpSchedule        Json?

  // Research and Evidence
  researchNotes        Json?
  clinicalTrials       Json?
  evidenceBase         Json?
  guidelinesReferences Json?

  // Epidemiology
  prevalenceData           Json?
  incidenceData            Json?
  demographicPatterns      Json?
  geographicalDistribution Json?
  seasonalPatterns         Json?

  // Classification
  severityClassification Json?
  functionalImpact       Json?
  environmentalFactors   Json?
  geneticFactors         Json?

  // Regulatory and Compliance
  isNotifiable             Boolean @default(false)
  notificationRequirements Json?
  reportingRequirements    Json?

  // Characteristics
  isChronic     Boolean @default(false)
  isHereditary  Boolean @default(false)
  isContagious  Boolean @default(false)
  isRareDisease Boolean @default(false)

  // Multi-language Support
  supportedLanguages        String[] @default(["en", "hi", "mr"])
  clinicalGuidelinesUrl     Json?
  patientEducationMaterials Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  icd10Code Icd10Code?  @relation(fields: [icd10CodeId], references: [id])
  icd11Code Icd11Code?  @relation(fields: [icd11CodeId], references: [id])
  diagnoses Diagnosis[]

  @@map("diseases")
}

// Clinical Examinations
model Examination {
  id              String   @id @default(cuid())
  visitId         String
  templateId      String?
  doctorId        String
  examinationType String?
  examinationDate DateTime @default(now())

  // Clinical Findings
  vitalSigns              Json?
  physicalExamination     Json?
  systemExamination       Json?
  neurologicalExamination Json?
  mentalStatusExamination Json?
  functionalAssessment    Json?

  // Measurements and Observations
  anthropometricMeasurements Json?
  laboratoryValues           Json?
  imagingFindings            Json?
  diagnosticTestResults      Json?

  // Documentation
  findings            Json?
  clinicalImpressions String?
  assessment          Json?
  plan                Json?

  // Media and Attachments
  images          Json?
  videos          Json?
  audioRecordings Json?
  documents       Json?

  // Diagnostic Information
  preliminaryDiagnosis  String[]
  differentialDiagnosis String[]
  finalDiagnosis        String[]
  diagnosticConfidence  Json?

  // Treatment Planning
  recommendations           Json?
  treatmentPlan             Json?
  medicationRecommendations Json?
  followUpRequirements      Json?

  // Quality and Safety
  riskAssessment    Json?
  safetyAlerts      Json?
  drugInteractions  Json?
  contraindications Json?

  // Review and Approval
  followUpRequired Boolean   @default(false)
  followUpDate     DateTime?
  qualityScore     Float?
  status           String    @default("in_progress")
  reviewedBy       String?
  reviewDate       DateTime?
  approvedBy       String?
  approvalDate     DateTime?

  // Performance Metrics
  examinationDuration Int? // minutes
  completenessScore   Float?
  accuracyIndicators  Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  visit             PatientVisit         @relation(fields: [visitId], references: [id])
  template          ExaminationTemplate? @relation(fields: [templateId], references: [id])
  doctor            Staff                @relation(fields: [doctorId], references: [id])
  doctorExamination Doctor?              @relation("DoctorExaminations", fields: [doctorId], references: [id], map: "examinations_doctor_examination_fkey")
  reviewedByDoctor  Doctor?              @relation("ExaminationReviewedBy", fields: [reviewedBy], references: [id], map: "examinations_reviewed_by_fkey")
  approvedByDoctor  Doctor?              @relation("ExaminationApprovedBy", fields: [approvedBy], references: [id], map: "examinations_approved_by_fkey")
  diagnoses         Diagnosis[]

  @@map("examinations")
}

// Diagnosis Management
model Diagnosis {
  id            String  @id @default(cuid())
  visitId       String
  examinationId String?
  diseaseId     String?
  doctorId      String

  // Diagnosis Information
  diagnosisType   String? // primary, secondary, complication, comorbidity
  diagnosisDate   DateTime @default(now())
  diagnosisMethod String? // clinical, laboratory, imaging, biopsy, etc.
  confidenceLevel Float? // 0.0 to 1.0

  // Clinical Details
  severity           String?
  stage              String?
  grade              String?
  anatomicalLocation Json?
  affectedSystems    String[]
  laterality         String? // left, right, bilateral, unspecified

  // Temporal Information
  onsetDate   DateTime?
  duration    String?
  progression String? // acute, chronic, progressive, stable

  // Evidence and Support
  supportingEvidence    Json?
  diagnosticCriteriaMet Json?
  laboratoryEvidence    Json?
  imagingEvidence       Json?
  pathologyEvidence     Json?

  // Treatment and Prognosis
  treatmentResponse String?
  prognosis         String?
  expectedOutcome   String?
  functionalImpact  Json?

  // Administrative
  isPrimary     Boolean @default(false)
  billable      Boolean @default(true)
  reportable    Boolean @default(false)
  workRelated   Boolean @default(false)
  injuryRelated Boolean @default(false)

  // Quality and Review
  peerReviewed   Boolean @default(false)
  qualityAssured Boolean @default(false)
  codingReviewed Boolean @default(false)

  notes           String?
  revisionHistory Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  visit           PatientVisit @relation(fields: [visitId], references: [id])
  examination     Examination? @relation(fields: [examinationId], references: [id])
  disease         Disease?     @relation(fields: [diseaseId], references: [id])
  doctor          Staff        @relation(fields: [doctorId], references: [id])
  doctorDiagnosis Doctor?      @relation("DoctorDiagnoses", fields: [doctorId], references: [id], map: "diagnoses_doctor_diagnosis_fkey")

  @@map("diagnoses")
}

// ============================================================================= 
// SUPER ADMIN MANAGEMENT (System-wide access)
// ============================================================================= 

model SuperAdmin {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String   @unique
  phone     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Authentication Relations
  credentials SuperAdminCredential[]
  sessions    SuperAdminSession[]

  @@map("super_admins")
}

// Super Admin specific authentication
model SuperAdminCredential {
  id                 String    @id @default(cuid())
  superAdminId       String
  credentialType     String    @default("email")
  credentialDataHash String
  isActive           Boolean   @default(true)
  createdAt          DateTime  @default(now())
  lastUsed           DateTime?
  failedAttempts     Int       @default(0)
  lockoutUntil       DateTime?

  // Relations
  superAdmin SuperAdmin @relation(fields: [superAdminId], references: [id])

  @@map("super_admin_credentials")
}

// Super Admin Sessions
model SuperAdminSession {
  id               String    @id @default(cuid())
  superAdminId     String
  sessionTokenHash String
  refreshTokenHash String?
  ipAddress        String?
  userAgent        String?
  loginTimestamp   DateTime  @default(now())
  lastActivity     DateTime  @default(now())
  expiresAt        DateTime
  isActive         Boolean   @default(true)
  logoutTimestamp  DateTime?

  // Relations
  superAdmin SuperAdmin @relation(fields: [superAdminId], references: [id])

  @@map("super_admin_sessions")
}
